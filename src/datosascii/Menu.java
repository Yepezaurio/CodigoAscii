/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datosascii;

import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author we_ro
 */
public class Menu extends javax.swing.JFrame {

    boolean bandera = false , bEstado = false;
    String sNumero, sChar;
    int iOpcion;
    int X = 200;
    int Y = 400;
    
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 800));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        jLabel1.setText("GRÁFICA DE SEÑALES");

        jLabel2.setText("Introduce un numero binario para gráficar");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nrzUnipolar", "nrBipolar", "rzUnipolar", "Manchester", "Manchester Diferencial" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Selecciona el tipo de Señal");

        jButton1.setText("Graficar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(447, 447, 447)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(119, 119, 119)
                            .addComponent(jLabel2)
                            .addGap(33, 33, 33)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(256, 256, 256)
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(680, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (jTextField1.getText().length() == 8) {
            bandera = true; 
            sNumero = jTextField1.getText().toString();
            iOpcion = jComboBox1.getSelectedIndex();
            System.out.println(iOpcion);
            System.out.println(sNumero);
            repaint();
            X=200;
            Y=400;
            
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Tu cadena tiene que ser 8 digitos y/o 1 y 0", "Error Message", 1, null);
        }
        
    
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void paint(Graphics g) 
    {
        super.paint(g);
        if(bandera)
        {
          g.drawLine(200, 400, 1000, 400);
          g.drawLine(200, 200, 200, 600);
          for (int i = 0; i <=8 ; i++) 
          {
            g.drawLine((200+i*100),200, (200+i*100), 600);
          }
       
        
        //Vamos a crear un switch para tener diferentes gráficados
        switch(iOpcion){
            case 0:
                nrzUnipolar(g);
                break;
            case 1:
                nrzBipolar(g);
                break;
            case 2:
                rzUnipolar(g);
                break;
            case 3:
                Manchester(g);
                break;
            case 4:
                manchesterDiferencial(g);
                break;
             
        }
        }
        bandera = false;
       
    } 
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    public void nrzUnipolar(Graphics g){
        for (int i = 0; i < sNumero.length(); i++) {
            //Aquí Pusimos un Sleep nos sirve para pintar las lineas de forma lenta ( 1 seg).
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(DatosAscii.class.getName()).log(Level.SEVERE, null, ex);
            }
            g.setColor(Color.BLUE);
            g.drawString(sNumero.charAt(i) + "", (250+i*100),200); //Aquí pintamos el Array o sNumero
            g.setColor(Color.red);
            //Pusimos el sChar para pasar letra x letra en el if
            sChar = sNumero.charAt(i) + "";
            /*
            Comparamos el primer caracter de nuestro arreglo si es 1 o 0.
            Entra a nuestro IF y hace una transicion si estaba en 0 para ello
            anteriormente.
            */
            
            if ( sChar.compareTo("1") == 0 ) {
                if (!bEstado){ //Variable interruptor
                    //Pintamos las lineas Verticales en este codigo
                    g.drawLine(X+1, Y, X+1,Y-100);
                    g.drawLine(X-1, Y, X-1,Y-100);
                    g.drawLine(X, Y, X,Y-100);
                    Y-=100; //Guardamos el valor de Y en 300 para pintar lineas verticales
                    bEstado = true;//Cambiamos el interruptor a veradero.
                }
            }
            else
            {
               /*
                Entra a nuestro interruptor pero ahora en Verdadero
                para pintar la transicion de 1 a 0. Mismo codigo de arriba pero para 0
               */
                if(bEstado){  
                   g.drawLine(X+1,Y,X+1,Y+100);
                   g.drawLine(X-1,Y,X-1,Y+100);
                   g.drawLine(X,Y,X,Y+100);
                   Y+=100;
                   bEstado = false;
               }
               
            }
            //Pintamos la linea de transición
            g.drawLine(X,Y+1,X+100,Y+1);
            g.drawLine(X,Y-1,X+100,Y-1);
            g.drawLine(X,Y,X+100,Y);
            X+=100;
        }
    }
    
    //Aqui graficamos donde el 0 pasa al voltaje de los negativos.
    public void nrzBipolar(Graphics g)
    {
        Y=500;
        for (int i = 0; i < sNumero.length(); i++) {
            //Aquí Pusimos un Sleep nos sirve para pintar las lineas de forma lenta ( 1 seg).
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(DatosAscii.class.getName()).log(Level.SEVERE, null, ex);
            }
            g.setColor(Color.BLUE);
            g.drawString(sNumero.charAt(i) + "", (250+i*100),200); //Aquí pintamos el Array o sNumero
            g.setColor(Color.red);
            //Pusimos el sChar para pasar letra x letra en el if
            sChar = sNumero.charAt(i) + "";
            /*
            Comparamos el primer caracter de nuestro arreglo si es 1 o 0.
            Entra a nuestro IF y hace una transicion si estaba en 0 para ello
            anteriormente.
            */
            
            if ( sChar.compareTo("1") == 0 ) {
                if (!bEstado){ //Variable interruptor
                    //Pintamos las lineas Verticales en este codigo
                    g.drawLine(X+1, Y, X+1,Y-200);
                    g.drawLine(X-1, Y, X-1,Y-200);
                    g.drawLine(X, Y, X,Y-200);
                    Y-=200; //Guardamos el valor de Y en 300 para pintar lineas verticales
                    bEstado = true;//Cambiamos el interruptor a veradero.
                }
            }
            else
            {
               /*
                Entra a nuestro interruptor pero ahora en Verdadero
                para pintar la transicion de 1 a 0. Mismo codigo de arriba pero para 0
               */
                if(bEstado){  
                   g.drawLine(X+1,Y,X+1,Y+200);
                   g.drawLine(X-1,Y,X-1,Y+200);
                   g.drawLine(X,Y,X,Y+200);
                   Y+=200;
                   bEstado = false;
               }
               
            }
            //Pintamos la linea de transición
            g.drawLine(X,Y+1,X+100,Y+1);
            g.drawLine(X,Y-1,X+100,Y-1);
            g.drawLine(X,Y,X+100,Y);
            X+=100;
        }
    }

    public void rzUnipolar(Graphics g)
    {
        for (int i = 0; i < sNumero.length(); i++) {
            //Aquí Pusimos un Sleep nos sirve para pintar las lineas de forma lenta ( 1 seg).
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(DatosAscii.class.getName()).log(Level.SEVERE, null, ex);
            }
            g.setColor(Color.BLUE);
            g.drawString(sNumero.charAt(i) + "", (250+i*100),200); //Aquí pintamos el Array o sNumero
            g.setColor(Color.red);
            //Pusimos el sChar para pasar letra x letra en el if
            sChar = sNumero.charAt(i) + "";
            if ( sChar.compareTo("1") == 0 ) {
                
              // Aqui empezamos en X=200 y Y=400
              g.drawLine(X, Y, X, Y-100);
              g.drawLine(X-1, Y, X-1, Y-100);
              g.drawLine(X+1, Y, X+1, Y-100);
              
              g.drawLine(X,Y-100,X+50,Y-100);
              g.drawLine(X,Y-101,X+50,Y-101);
              g.drawLine(X,Y-99,X+50,Y-99);
              
              g.drawLine(X+50, Y-100, X+50, Y);
              g.drawLine(X+51, Y-100, X+51, Y);
              g.drawLine(X+49, Y-100, X+49, Y);
              
              g.drawLine(X+50, Y+1, X+100, Y+1);
              g.drawLine(X+50, Y-1, X+100, Y-1);
              g.drawLine(X+50, Y, X+100, Y);
              X+=100;
            }
            else
            {
              g.drawLine(X,Y+1,X+100,Y+1);
              g.drawLine(X,Y-1,X+100,Y-1);
              g.drawLine(X,Y,X+100,Y);
              X+=100;
               
            }
           
            
            //Pintamos la linea de transición
            
        }
    }
    
    
    public void Manchester(Graphics g)
    {
        
        
       for (int i = 0; i < sNumero.length(); i++) {
            //Aquí Pusimos un Sleep nos sirve para pintar las lineas de forma lenta ( 1 seg).
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(DatosAscii.class.getName()).log(Level.SEVERE, null, ex);
            }
            g.setColor(Color.BLUE);
            g.drawString(sNumero.charAt(i) + "", (250+i*100),200); //Aquí pintamos el Array o sNumero
            g.setColor(Color.red);
            //Pusimos el sChar para pasar letra x letra en el if
            sChar = sNumero.charAt(i) + "";
            
            //Comparamos si es 1 o 0 
            if ( sChar.compareTo("1") == 0 ) {
                //Nos va ayudar si es verdadero va pintar una linea hacia abajo 
                if(bEstado)
                {
                    g.drawLine(X, Y, X, Y+200);
                }
                //Si era falso nos va ayudar a avanzar primero y luego subir.
                if(!bEstado)
                {
                  Y-=100;
                  bEstado=true;
                }
                
                g.drawLine(X, Y+200, X+50, Y+200);
                g.drawLine(X+50,Y+200, X+50, Y);
                g.drawLine(X+50,Y, X+100, Y);
                X+=100;
              
                
            }
            else
            {   
                if(!bEstado)
                {
                     g.drawLine(X, Y+100, X, Y-100);
                }
                if(bEstado)
                {
                   Y+=100;
                   bEstado=false;
                }
                g.drawLine(X,Y-100,X+50,Y-100);
                g.drawLine(X+50,Y-100,X+50, Y+100);
                g.drawLine(X+50,Y+100, X+100, Y+100);
                X+=100;
            }
          
        }
    }
    
    public void manchesterDiferencial(Graphics g)
    {
        boolean bBandera1 = false;
        for (int i = 0; i < sNumero.length(); i++) {
            //Aquí Pusimos un Sleep nos sirve para pintar las lineas de forma lenta ( 1 seg).
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(DatosAscii.class.getName()).log(Level.SEVERE, null, ex);
            }
            g.setColor(Color.BLUE);
            g.drawString(sNumero.charAt(i) + "", (250+i*100),200); //Aquí pintamos el Array o sNumero
            g.setColor(Color.red);
            //Pusimos el sChar para pasar letra x letra en el if
            sChar = sNumero.charAt(i) + "";
            
            //Comparamos si es 1 o 0 
            if ( sChar.compareTo("1") == 0 ) {
                
                //Si era falso nos va ayudar a avanzar primero y luego subir.
                /*
                if(bBandera1 )
                {
                  g.drawLine(X,Y-100,X,Y+100);
                  g.drawLine(X,Y+100, X+50, Y+100);
                  g.drawLine(X+50,Y+100, X+50, Y-100);
                  g.drawLine(X+50, Y-100, X+100, Y-100);
                  
       
                if(bEstado)
                {
                  g.drawLine(X,Y-100,X,Y+100);
                  g.drawLine(X,Y+100, X+50, Y+100);
                  g.drawLine(X+50,Y+100, X+50, Y-100);
                  g.drawLine(X+50, Y-100, X+100, Y-100);
                  bBandera1=true;
                }
               
                if(!bEstado)
                {
                  g.drawLine(X,Y-100,X,Y+100);
                  g.drawLine(X,Y+100, X+50, Y+100);
                  g.drawLine(X+50,Y+100, X+50, Y-100);
                  g.drawLine(X+50, Y-100, X+100, Y-100);
                }
               */
                if(!bBandera1 && !bEstado)
                {
                  g.drawLine(X, Y-100, X, Y+100);
                  g.drawLine(X,Y+100, X+50, Y+100);
                  g.drawLine(X+50,Y+100, X+50, Y-100);
                  g.drawLine(X+50, Y-100, X+100, Y-100);
                }else if(bBandera1)
                {
                  g.drawLine(X,Y+100,X,Y-100);
                  g.drawLine(X, Y-100, X+50, Y-100);
                  g.drawLine(X+50, Y-100, X+50, Y+100);
                  g.drawLine(X+50, Y+100, X+100,Y+100);
                }
                
                X+=100;
              
                
            }
            else
            {   
                if(bEstado)
                {
                 g.drawLine(X,Y+100,X+50,Y+100);
                 g.drawLine(X+50,Y+100,X+50, Y-100);
                 g.drawLine(X+50,Y-100, X+100, Y-100);
                 bEstado=false;
                 bBandera1=false;
                }else
                {
                  g.drawLine(X,Y-100,X+50,Y-100);
                  g.drawLine(X+50,Y-100,X+50, Y+100);
                  g.drawLine(X+50,Y+100, X+100, Y+100);  
                  bEstado=true;
                  bBandera1=true;
                }
                 X+=100;
                 
                 
            }
          
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
